local assets = loadstring(game:HttpGet("https://raw.githubusercontent.com/PaperWererer/k/main/Elevate.Assets", true))()
local Control = {}

function Control.Setup(toggle)
    local ui = assets.Elevate:Clone()
    ui.Parent = game.CoreGui
    ui.Enabled = true
    
    game:GetService("UserInputService").InputBegan:Connect(function(key,istyping)
    	if istyping then return end
    	
    	if key.KeyCode == toggle then
    		ui.Enabled = not ui.Enabled
    	end
    end)
    
    return ui
end
    
function Control.CreateNewTab(ui,tabname)
	local newtab = assets.TabTemplate2:Clone()
	newtab.Parent = ui.Main.Lists.Frame
	newtab.Name = tabname
	newtab.Visible = false

	local tabbutton = assets.TabTemplate1:Clone()
	tabbutton.Name = tabname
	tabbutton.Parent = ui.Main.Buttons.Sections
	tabbutton.Button.Text = tabname
	tabbutton.Visible = true
	
	tabbutton.Button.MouseButton1Click:Connect(function()
		for i,v in pairs(ui.Main.Lists.Frame:GetChildren()) do
			pcall(function()
				v.Visible = false
			end)
		end
    
    		for i,v in pairs(ui.Main.Buttons.Sections:GetChildren()) do
			if v:IsA("Frame") then
        			v.Transparency = 1
        			v.Color.Visible = false
				v.Button.TextColor3 = Color3.fromRGB(150,150,150)
      			end
		end
    
		newtab.Visible = true
        	tabbutton.Transparency = .9
        	tabbutton.Color.Visible = true
		tabbutton.Button.TextColor3 = Color3.fromRGB(255,255,255)
	end)
	
  	spawn(function()
    		while task.wait() do
      			newtab.CanvasSize = UDim2.new(0, 0, 0, newtab.UIListLayout.AbsoluteContentSize.Y)
    		end
  	end)
	
	return {Tab = newtab,Button = tabbutton}
end
    
function Control.CreateList(tab,listname)
	local newlist = assets.ListTemplate:Clone()
	newlist.Parent = tab
	newlist.Name = listname
	newlist.Label.Text = listname
  	spawn(function()
    		while task.wait() do
      			newlist.Size = UDim2.new(0.32,0,0,newlist.UI.AbsoluteContentSize.Y+6)
    		end
  	end)
	
	return {List = newlist}
end

function Control.CreateToggle(list,name)
	local State = {
		Enabled = false,
		Debounce = false,
	}

	local temp = assets.ToggleTemplate:Clone()
	temp.Parent = list
	temp.Visible = true
	temp.Label.Text = name

	temp.Button.InputBegan:Connect(function(key)
		if key.UserInputType == Enum.UserInputType.MouseButton1 and not State.Debounce then
			State.Debounce = true
			task.delay(.35,function()
				State.Debounce = false
			end)

			State.Enabled = not State.Enabled
			temp.Button.On.Visible = State.Enabled
		end
	end)

	return {Button = temp,State = State}
end

function Control.CreateButton(list,name,func)
	local temp = assets.ButtonTemplate:Clone()
	temp.Parent = list
	temp.Button.Text = name
	
	temp.Button.MouseButton1Click:Connect(function()
		func()
	end)

	return {Button = temp}
end

function Control.CreateLabel(list,name)
	local temp = assets.LabelTemplate:Clone()
	temp.Parent = list
	temp.Label.Text = name
	
	return {Label = temp}
end

function Control.CreateTextbox(list,name)
	local temp = assets.TextBoxTemplate:Clone()
	temp.Parent = list
	temp.Label.Text = name
	
	return {Textbox = temp.TextBox.Selection}
end

function Control.CreateViewport(list)
	local temp = assets.ViewportTemplate:Clone()
	temp.Parent = list
	
	return {Viewport = temp}
end

function Control.CreateImage(list,imageid)
	local temp = assets.ImageTemplate:Clone()
	temp.Parent = list
	temp.Label.Text = name
	temp.Image.Image = imageid
	
	return {Image = temp}
end

function Control.CreateDropDown(list,name,refreshfunc)
	local State = {
		Selected = nil,
	}
	
	local templ = assets.DropDownTemplate:Clone()
	temp.Parent = list
	temp.Label.Text = name
	
	local drop = temp.DropDown
	local truedrop = drop.Parent
	local selection = drop.Selection
	local menu = selection.Menu
	local open = menu.Open.Value

	function trigger()
		if not open then
			menu:TweenSize(UDim2.new(1, 0, 0, 45), "Out", "Sine", 0.15, true)
			drop:TweenSize(UDim2.new(1, 0, 0, 60), "Out", "Sine", 0.15, true)
			truedrop:TweenSize(UDim2.new(0.9, 0, 0, 80), "Out", "Sine", 0.15, true)
			menu.CanvasSize = UDim2.new(0,0,0,menu.UI.AbsoluteContentSize.Y)
			menu.ScrollBarImageTransparency = 0
			open = true
		else
			menu:TweenSize(UDim2.new(1, 0, 0, 0), "Out", "Sine", 0.15, true)
			drop:TweenSize(UDim2.new(1, 0, 0, 15), "Out", "Sine", 0.15, true)
			truedrop:TweenSize(UDim2.new(0.9, 0, 0, 35), "Out", "Sine", 0.15, true)
			menu.ScrollBarImageTransparency = 1
			open = false
		end
	end
	
	local function RefreshOptions()
		for i,v in pairs(menu:GetChildren()) do
			if v:IsA("TextButton") then
				v:Destroy()
			end
		end
		
		local items = refreshfunc()
		if items == nil or not items then items = {} end
		
		for i,v in pairs(items) do
			local button = assets.DropDown:Clone()
			button.Parent = menu
			
			pcall(function()
				if v.Name then
					button.Text = v.Name
				else
					button.Text = v
				end
			end)
			
			button.MouseEnter:Connect(function()
				button.BackgroundTransparency = 0.8
			end)

			button.MouseLeave:Connect(function()
				button.BackgroundTransparency = 1
			end)

			button.MouseButton1Click:Connect(function()
				selection.Text = button.Text
				State.Selected = v
				trigger()
				RefreshOptions()
			end)
		end
	end
	
	RefreshOptions()
	
	selection.MouseButton1Click:Connect(trigger)
	
	return {Drop = drop,State = State}
end

return Control
