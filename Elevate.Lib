local assets = loadstring(game:HttpGet("https://raw.githubusercontent.com/PaperWererer/k/main/Elevate.Assets", true))()
local Control = {}
local Loaded = {}
local Buttons = {}

function Control.Setup(toggle,filename)
    if game.CoreGui:FindFirstChild("Elevate") then return end

    local ui = assets.Elevate:Clone()
    ui.Parent = game.CoreGui
    ui.Enabled = true
    
    game:GetService("UserInputService").InputBegan:Connect(function(key,istyping)
    	if istyping then return end
    	
    	if key.KeyCode == toggle then
    		ui.Enabled = not ui.Enabled
    	end
    end)
	
	local function CheckFiles()
	    local IsFile = isfile('Elevate/'..filename..'.Json')
	    local IsFolder = isfolder('Elevate')
	    if not IsFolder then makefolder('Elevate') end
	    local EmptyTable = {}
	    local TableToString = game:GetService("HttpService"):JSONEncode(EmptyTable)
	    if not IsFile then writefile('Elevate/'..filename..'.Json', TableToString) end
	end

	local function SaveConfig(DATA)
		CheckFiles()
		task.wait()
		writefile('Elevate/'..filename..'.Json', DATA)
	end

	local function LoadConfig()
		CheckFiles()
		local ConfigContents = readfile('Elevate/'..filename..'.Json')
		local UNPACKED = game:GetService("HttpService"):JSONDecode(ConfigContents)
		
		Loaded = UNPACKED
	end

	task.spawn(function()
	    while task.wait(2) do
	        SaveConfig(game:GetService("HttpService"):JSONEncode(Buttons))
	    end
	end)

	LoadConfig()

    task.spawn(function()
		local UIS = game:GetService('UserInputService')
		local dragToggle = nil
		local dragStart = nil
		local startPos = nil

		ui.Main.Top.InputBegan:Connect(function(input)
			if (input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch) then 
				dragToggle = true
				dragStart = input.Position
				startPos = ui.Main.Position
				input.Changed:Connect(function()
					if input.UserInputState == Enum.UserInputState.End then
						dragToggle = false
					end
				end)
			end
		end)

		UIS.InputChanged:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
				if dragToggle then
					local delta = input.Position - dragStart
					local position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X,startPos.Y.Scale, startPos.Y.Offset + delta.Y)
					game:GetService('TweenService'):Create(ui.Main, TweenInfo.new(0.2), {Position = position}):Play()
				end
			end
		end)
	end)
    
    return ui
end
    
function Control.CreateNewTab(ui,tabname)
	local newtab = assets.TabTemplate2:Clone()
	newtab.Parent = ui.Main.Lists.Frame
	newtab.Name = tabname
	newtab.Visible = false

	local tabbutton = assets.TabTemplate1:Clone()
	tabbutton.Name = tabname
	tabbutton.Parent = ui.Main.Buttons.Sections
	tabbutton.Button.Text = tabname
	tabbutton.Visible = true
	
	tabbutton.Button.MouseButton1Click:Connect(function()
		for i,v in pairs(ui.Main.Lists.Frame:GetChildren()) do
			pcall(function()
				v.Visible = false
			end)
		end
    
    		for i,v in pairs(ui.Main.Buttons.Sections:GetChildren()) do
			if v:IsA("Frame") then
        			v.Transparency = 1
        			v.Color.Visible = false
				v.Button.TextColor3 = Color3.fromRGB(150,150,150)
      			end
		end
    
		newtab.Visible = true
        	tabbutton.Transparency = .9
        	tabbutton.Color.Visible = true
		tabbutton.Button.TextColor3 = Color3.fromRGB(255,255,255)
	end)
	
  	spawn(function()
    		while task.wait() do
      			newtab.CanvasSize = UDim2.new(0, 0, 0, newtab.UIListLayout.AbsoluteContentSize.Y)
    		end
  	end)
	
	return {Tab = newtab,Button = tabbutton}
end
    
function Control.CreateList(tab,listname)
	local newlist = assets.ListTemplate:Clone()
	newlist.Parent = tab
	newlist.Name = listname
	newlist.Label.Text = listname
  	spawn(function()
    		while task.wait() do
      			newlist.Size = UDim2.new(0.32,0,0,newlist.UI.AbsoluteContentSize.Y+6)
    		end
  	end)
	
	return {List = newlist}
end

function Control.CreateToggle(list,name)
	local State = {
		Enabled = false,
		Debounce = false,
	}

	local temp = assets.ToggleTemplate:Clone()
	temp.Parent = list
	temp.Visible = true
	temp.Label.Text = name

	for i,v in pairs(Loaded) do
		if v.Name == name then
			State.Enabled = v.State
		end
	end

	table.insert(Buttons,{Name = name,State = State.Enabled})
	
	temp.Button.InputBegan:Connect(function(key)
		if key.UserInputType == Enum.UserInputType.MouseButton1 and not State.Debounce then
			State.Debounce = true
			task.delay(.35,function()
				State.Debounce = false
			end)

			State.Enabled = not State.Enabled
			temp.Button.On.Visible = State.Enabled
		end
	end)

	task.spawn(function()
		while task.wait(1) do
			temp.Button.On.Visible = State.Enabled
			
			for _,v in pairs(Buttons) do
				if v.Name == name then
					v.State = State.Enabled
				end
			end
		end
	end)

	return {Button = temp,State = State}
end

function Control.CreateButton(list,name,func)
	local temp = assets.ButtonTemplate:Clone()
	temp.Parent = list
	temp.Button.Text = name
	
	temp.Button.MouseButton1Click:Connect(function()
		func()
	end)
	
	return {Button = temp}
end

function Control.CreateLabel(list,name)
	local temp = assets.LabelTemplate:Clone()
	temp.Parent = list
	temp.Label.Text = name
	
	return {Label = temp}
end

function Control.CreateTextbox(list,name)
	local temp = assets.TextBoxTemplate:Clone()
	temp.Parent = list
	temp.Label.Text = name
	
	return {Textbox = temp.TextBox.Selection}
end

function Control.CreateViewport(list)
	local temp = assets.ViewportTemplate:Clone()
	temp.Parent = list
	
	return {Viewport = temp.Viewport.ViewportFrame}
end

function Control.CreateImage(list,imageid)
	local temp = assets.ImageTemplate:Clone()
	temp.Parent = list
	temp.Label.Text = name
	temp.Image.Image = imageid
	
	return {Image = temp}
end

function Control.CreateSlider(list,name,Min,Max,Suffix)
	local State = {
		Sliding = false,
		Value = Min,
	}
	
	local plr = game.Players.LocalPlayer
	local UIS = game:GetService("UserInputService")
	local Template = assets.SliderTemplate:Clone()
	Template.Parent = list
	
	local Bar = Template.Bar
	local Slider = Bar.Slider
	local Bfly = Bar.Bfly
	local Button = Bar.Btn
	local Label = Template.Label

	local mouse = plr:GetMouse()

	local function RoundToNearest(x,roundto)
		return (math.floor(x*roundto)/roundto)
	end

	local function NRound(x)
		local y = x - math.floor(x)
		if y < 0.5 then
			return y
		else
			return math.ceil(x)
		end
	end

	local function getClosestNumber(values, target)
		local closestNumber = nil
		local closestDifference = math.huge

		for _, value in ipairs(values) do
			local difference = math.abs(value - target)

			if difference < closestDifference then
				closestNumber = value
				closestDifference = difference
			end
		end

		return closestNumber
	end

	local function lerp(start, finish, alpha)
		return start + (finish - start) * alpha
	end

	Button.MouseButton1Down:Connect(function()
		State.Sliding = true
	end)

	UIS.InputEnded:Connect(function(key,istyping)
		if key.UserInputType == Enum.UserInputType.MouseButton1 then
			State.Sliding = false
		end
	end)

	Label.Text = name.." - "..State.Value..Suffix

	function ForceVisualUpdate()
		State.Value = math.clamp(State.Value,Min,Max)
		Label.Text = name.." - "..State.Value..Suffix

		local sliderPosNew = UDim2.new(0,State.Value/Max,0,-4)
		Slider.Position = sliderPosNew
	end
	
	mouse.Move:Connect(function()
		if State.Sliding then
			local xOffset = (mouse.X-Bar.AbsolutePosition.X)
			local xOffsetClamped = math.clamp(xOffset-2,-2,Bar.AbsoluteSize.X-4)

			local sliderPosNew = UDim2.new(0,xOffsetClamped,0,-4)

			Slider.Position = sliderPosNew
			Bfly.Size = UDim2.new(0,xOffsetClamped+2,1,0)
			local newval = lerp(Min,Max,xOffsetClamped/(Bar.AbsoluteSize.X-4))

			State.Value = math.clamp(math.floor(newval),Min,Max)
			Label.Text = name.." - "..State.Value..Suffix
		end
	end)
	
	return {Slider = Template,State = State}
end

function Control.CreateDropDown(list,name,refreshfunc)
	local State = {
		Selected = nil,
	}
	
	local temp = assets.DropDownTemplate:Clone()
	temp.Parent = list
	temp.Label.Text = name
	
	local drop = temp.DropDown
	local truedrop = drop.Parent
	local selection = drop.Selection
	local menu = selection.Menu
	local open = menu.Open.Value

	local function trigger()
		if not open then
			menu:TweenSize(UDim2.new(1, 0, 0, 45), "Out", "Sine", 0.15, true)
			drop:TweenSize(UDim2.new(1, 0, 0, 60), "Out", "Sine", 0.15, true)
			truedrop:TweenSize(UDim2.new(0.9, 0, 0, 80), "Out", "Sine", 0.15, true)
			menu.CanvasSize = UDim2.new(0,0,0,menu.UI.AbsoluteContentSize.Y)
			menu.ScrollBarImageTransparency = 0
			open = true
		else
			menu:TweenSize(UDim2.new(1, 0, 0, 0), "Out", "Sine", 0.15, true)
			drop:TweenSize(UDim2.new(1, 0, 0, 15), "Out", "Sine", 0.15, true)
			truedrop:TweenSize(UDim2.new(0.9, 0, 0, 35), "Out", "Sine", 0.15, true)
			menu.ScrollBarImageTransparency = 1
			open = false
		end
	end
	
	local function RefreshOptions()
		for i,v in pairs(menu:GetChildren()) do
			if v:IsA("TextButton") then
				v:Destroy()
			end
		end
		
		local items = refreshfunc()
		if items == nil or not items then items = {} end
		
		for i,v in pairs(items) do
			local button = assets.DropDown:Clone()
			button.Parent = menu
			
			pcall(function()
				if v.Name then
					button.Text = v.Name
				else
					button.Text = v
				end
			end)

			button.MouseButton1Click:Connect(function()
				selection.Text = button.Text
				State.Selected = v
				trigger()
				RefreshOptions()
			end)
		end
	end
	
	RefreshOptions()
	
	selection.MouseButton1Click:Connect(trigger)
	
	return {Drop = drop,State = State}
end

return Control
